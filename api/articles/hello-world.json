{"title":"","slug":"hello-world","date":"2017-07-10T14:01:53.000Z","updated":"2017-09-06T13:24:30.000Z","comments":true,"excerpt":"","content":"<p>Event loop</p>\n<p>The event loop got its name because of how it’s usually implemented, which usually resembles:<br>while (queue.waitForMessage()) {<br>  queue.processNextMessage();<br>}<br>queue.waitForMessage waits synchronously for a message to arrive if there is none currently.<br>“Run-to-completion”</p>\n<p>Each message is processed completely before any other message is processed. This offers some nice properties when reasoning about your program, including the fact that whenever a function runs, it cannot be pre-empted and will run entirely before any other code runs (and can modify data the function manipulates). This differs from C, for instance, where if a function runs in a thread, it can be stopped at any point to run some other code in another thread.<br>A downside of this model is that if a message takes too long to complete, the web application is unable to process user interactions like click or scroll. The browser mitigates this with the “a script is taking too long to run” dialog. A good practice to follow is to make message processing short and if possible cut down one message into several messages.<br>Adding messages</p>\n<p>In web browsers, messages are added any time an event occurs and there is an event listener attached to it. If there is no listener, the event is lost. So a click on an element with a click event handler will add a message–likewise with any other event.<br>Calling setTimeout will add a message to the queue after the time passed as a second argument. If there is no other message in the queue, the message is processed right away; however, if there are messages, the setTimeout message will have to wait for other messages to be processed. For that reason the second argument indicates a minimum time and not a guaranteed time.<br>Zero delays</p>\n<p>Zero delay doesn’t actually mean the call back will fire-off after zero milliseconds. Calling setTimeoutwith a delay of 0 (zero) milliseconds doesn’t execute the callback function after the given interval. The execution depends on the number of awaiting tasks in the queue. In the example below the message ‘’this is just a message’’ will be written to the console before the message in the callback gets processed, because the delay is the minimum time required for the runtime to process the request, but not a guaranteed time.</p>\n<p>(function() {</p>\n<p>  console.log(‘this is the start’);</p>\n<p>  setTimeout(function cb() {<br>    console.log(‘this is a msg from call back’);<br>  });</p>\n<p>  console.log(‘this is just a message’);</p>\n<p>  setTimeout(function cb1() {<br>    console.log(‘this is a msg from call back1’);<br>  }, 0);</p>\n<p>  console.log(‘this is the end’);</p>\n<p>})();</p>\n<p>// “this is the start”<br>// “this is just a message”<br>// “this is the end”<br>// “this is a msg from call back”<br>// “this is a msg from call back1”</p>\n","categories":[],"tags":[]}